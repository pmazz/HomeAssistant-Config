#++++++++++++++++++++++++++++++++++++++
#+++++ System related automations +++++
#++++++++++++++++++++++++++++++++++++++
- id: autohide_notification_NewDevicesDiscovered
  #Nasconde la notifica 'New devices discovered' se attiva
  alias: autohide_notification_NewDevicesDiscovered
  trigger:
    - platform: state
      entity_id: persistent_notification.config_entry_discovery
      to: "notifying"
  action:
    - service: persistent_notification.dismiss
      data:
        notification_id: "config_entry_discovery"

- id: bot_notify_ha_started
  #Notifica avvio Home Assistant
  alias: bot_notify_ha_started
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: persistent_notification.dismiss
      data:
        notification_id: "9975-Restart"
    - service: notify.telegram_paolo
      data:
        message: "\U0001F44D Home Assistant avviato."
    - delay: "00:00:15" #Wait for Node-Red addon to boot (and catch the event)
    - event: pm_init_switches #Force switches custom configuration reload
    - delay: "00:00:05" #Wait for the next event to raise
    - event: pm_reload_themes #Force themes reload in input_select.hass_theme_selected

- id: bot_notify_ha_newrelease
  #Notifica agg.to Home Assistant rilasciato
  alias: bot_notify_ha_newrelease
  trigger:
    - platform: state
      entity_id: binary_sensor.updater
  condition:
    - condition: template
      value_template: "{{ is_state('binary_sensor.updater', 'on') and states('binary_sensor.updater') != states('sensor.hass_installed_version') }}"
  action:
    - service: notify.telegram_paolo
      data_template: 
        title: "\U0001F389 Home Assistant Update"
        message: "Version *{{state_attr('binary_sensor.updater', 'newest_version')}}* is now available (installed: {{states('sensor.hass_installed_version')}})."

- id: bot_notify_hacs_updates
  #Notifica agg.ti HACS
  alias: bot_notify_hacs_updates
  trigger:
    - platform: state
      entity_id: sensor.hacs
  condition:
    - condition: template
      value_template: "{{ trigger.from_state.state != trigger.to_state.state and (states('sensor.hacs') | int) > 0 }}"
  action:
    - service: telegram_bot.send_message
      data_template:
        title: "\U0001F389 HACS Updates"
        message: >
          *{{states('sensor.hacs')}}* update{% if (states('sensor.hacs') | int) > 1 %}s{% endif %} available{{":"}}
          {% for rep in state_attr('sensor.hacs', 'repositories') %}
          {{- "\r- [" ~ rep.name.split('/')[1] ~ "](https://github.com/" ~ rep.name ~ ")\r  " ~ rep['installed_version'] ~ " -> " ~ rep['available_version'] }}
          {{- "\r  [Commits](https://github.com/" ~ rep.name ~ "/commits) - [Releases](https://github.com/" ~ rep.name ~ "/releases)" }}
          {% endfor %}
        disable_web_page_preview: true
        target:
          - !secret telegram_chatid_paolo

- id: system_ha_restart_each_night
  #Riavvia Home Assistant ogni notte
  alias: system_ha_restart_each_night
  trigger:
    - platform: time
      at: "03:00:00"
  action:
    - service: script.hass_restart

- id: mediaplayer_reset_volume
  #Ripristina il volume dopo play o TTS
  alias: mediaplayer_reset_volume
  trigger:
    - platform: state
      entity_id: media_player.salotto
      from: "playing"
      to: "idle"
  action:
    - service: media_player.volume_set #Reset volume after playing
      data_template:
        entity_id: media_player.salotto
        volume_level: "{{ states('input_number.google_home_volume') }}"

- id: system_execute_script_via_webhook
  #Esegue script tramite webhook trigger
  #- Post su http://homeassistant:8123/api/webhook/exec_script_webhook
  #- Header -> Content-Type: application/json
  #- Body -> {"script":"<nome script senza domain>"}
  alias: system_execute_script_via_webhook
  trigger:
    - platform: webhook  #https://www.home-assistant.io/docs/automation/trigger/#webhook-trigger
      webhook_id: exec_script_webhook
  action:
    - service: notify.telegram_paolo
      data_template:
        message: "Esecuzione '[script.{{trigger.json.script}}]' da webhook"
    - service_template: "script.{{trigger.json.script}}"
    - service: input_text.set_value #Store last executed script
      data_template:
        entity_id: input_text.webhook_last_script
        value: "script.{{trigger.json.script}}"
    - service: input_datetime.set_datetime #Store last executed script time
      data_template:
        entity_id: input_datetime.webhook_last_script_exec
        date: "{{ now().strftime('%Y-%m-%d') }}"
        time: "{{ now().strftime('%H:%M:%S') }}"

- id: system_update_all_tasmota
  #Aggiorna lo stato dei dispositivi Tasmota all'avvio
  alias: system_update_all_tasmota
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: mqtt.publish #Update request for all connected Tasmota devices
      data:
        topic: "home/sonoffs/cmnd/POWER"
        payload: ""
    - service: mqtt.publish #Status request for all connected Tasmota devices (for boot count, RSSI, etc)
      data:
        topic: "home/sonoffs/cmnd/STATUS"
        payload: "0"

- id: system_update_connected_tasmota
  #Aggiorna lo stato del dispositivo Tasmota appena connesso
  alias: system_update_connected_tasmota
  trigger:
    - platform: state
      entity_id: binary_sensor.online_sonoff_basic_1, binary_sensor.online_sonoff_basic_2, binary_sensor.online_sonoff_basic_3, binary_sensor.online_smartplug_1, binary_sensor.online_smartplug_2, binary_sensor.online_smartplug_3, binary_sensor.online_smartplug_4, binary_sensor.online_smartplug_5, binary_sensor.online_smartplug_6, binary_sensor.online_smartplug_7, binary_sensor.online_smartplug_8
      from: "off"
      to: "on"
  action:
    - service: mqtt.publish #Status request for the Tasmota device (for boot count, RSSI, etc)
      data_template:
        topic: "home/{{ trigger.entity_id|replace('binary_sensor.online_', '')|replace('smartplug', 'smart_plug') }}/cmnd/STATUS"
        payload: "0"


#++++++++++++++++++++++++++++++++++
#+++++ UI related automations +++++
#++++++++++++++++++++++++++++++++++
- id: ui_persistent_notification_dismiss
  #Chiude il pannello delle notifiche dopo qualche secondo
  #NB: Agisce solo sulle notifiche con notification_id: "9975"
  alias: ui_persistent_notification_dismiss
  trigger:
    - platform: state
      entity_id: persistent_notification.9975
      to: "notifying"
  action:
    - service: script.persistent_notification_dismiss

- id: theme_set
  alias: theme_set
  trigger:
    - platform: state
      entity_id: input_select.hass_theme_selected
  action:
    - service: input_text.set_value
      data_template:
        entity_id: input_text.hass_theme_selected_saved
        value: "{{ states('input_select.hass_theme_selected') }}"
    - service: frontend.set_theme
      data_template:
        name: "{{ states('input_select.hass_theme_selected') }}"

# - id: hass_theme_selected_saved___changed
#   alias: hass_theme_selected_saved changed
#   trigger:
#     - platform: state
#       entity_id: input_text.hass_theme_selected_saved
#   action:
#     - service: notify.telegram_paolo
#       data_template:
#         message: "(HA) txt set\r hass\_theme\_selected: {{ states('input_select.hass_theme_selected') }}\r hass\_theme\_selected\_txt: {{ states('input_text.hass_theme_selected_saved') }}"


#++++++++++++++++++++++++++++++++++
#+++++ TV related automations +++++
#++++++++++++++++++++++++++++++++++
- id: bot_notify_tv_on
  #Notifica TV accesa quando non c'Ã¨ nessuno in casa
  alias: bot_notify_tv_on
  trigger:
    - platform: state
      entity_id: binary_sensor.online_samsung_tv
      from: "off"
      to: "on"
  condition:
    - condition: state
      entity_id: binary_sensor.home_anyone_in
      state: "off"
  action:
    - service: notify.telegram_paolo
      data_template:
        title: "Attenzione:"
        message: "\U0001F4FA TV Accesa in casa!"

- id: tv_remote_set_channel
  #Telecomando TV - Cambia canale
  alias: tv_remote_set_channel
  trigger:
    - platform: state
      entity_id: input_number.tv_remote_channel
  action:
    - service: media_player.play_media
      data_template:
        entity_id: media_player.samsung_tv
        media_content_id: "{{ states('input_number.tv_remote_channel') | int }}"
        media_content_type: channel


#+++++++++++++++++++++++++++++++++++++
#+++++ Media related automations +++++
#+++++++++++++++++++++++++++++++++++++
- id: google_home_set_volume
  #Imposta volume Google Home via UI
  alias: google_home_set_volume
  trigger:
    - platform: state
      entity_id: input_number.google_home_volume
  action:
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.salotto
        volume_level: "{{ states('input_number.google_home_volume') }}"

- id: google_home_update_volume
  #Aggiorna volume nel sensore se modificato via Google Home (es: comando vocale)
  alias: google_home_update_volume
  trigger:
    - platform: state
      entity_id: media_player.salotto
  condition:
    - condition: template
      value_template: "{{ (trigger.from_state.attributes.volume_level | round(1)) != (trigger.to_state.attributes.volume_level | round(1)) }}"
  action:
    - service: input_number.set_value
      data_template:
        entity_id: input_number.google_home_volume
        value: "{{ trigger.to_state.attributes.volume_level | round(1) }}"

- id: google_home_stream_radio
  #Avvia streaming radio
  alias: google_home_stream_radio
  trigger:
    - platform: state
      entity_id: input_select.radio_station
  action:
    - service: media_player.volume_set #Set volume before streaming
      data_template:
        entity_id: media_player.salotto
        volume_level: "0.2"
    - service: media_player.play_media #Stream Radio - Play
      data_template:
        entity_id: media_player.salotto
        media_content_id: >
          {% if is_state("input_select.radio_station", "Radio24") %}
            http://radio24-lh.akamaihd.net/i/radio24_1@99307/index_1_a-p.m3u8
          {% elif is_state("input_select.radio_station", "Radio Rai 1") %}
            http://icestreaming.rai.it/1.mp3
          {% elif is_state("input_select.radio_station", "Radio Deejay") %}
            http://radiodeejay-lh.akamaihd.net/i/RadioDeejay_Live_1@189857/master.m3u8
          {% elif is_state("input_select.radio_station", "RDS") %}
            http://stream1.rds.it:8000/rds64k
          {% elif is_state("input_select.radio_station", "Radio 101") %}
            http://icecast.unitedradio.it/r101
          {% elif is_state("input_select.radio_station", "RTL 102.5") %}
            https://rtl-radio-stream-thron.akamaized.net/live/radio1/radio1/chunklist.m3u8
          {% elif is_state("input_select.radio_station", "Radio 105") %}
            http://icecast.unitedradio.it/Radio105.mp3
          {% elif is_state("input_select.radio_station", "Virgin Radio") %}
            http://icecast.unitedradio.it/Virgin.mp3
          {% elif is_state("input_select.radio_station", "Radio Capital") %}
            http://radiocapital-lh.akamaihd.net/i/RadioCapital_Live_1@196312/master.m3u8
          {% elif is_state("input_select.radio_station", "George Michael") %}
          	http://icy.unitedradio.it/MusicStarPrince.mp3
          {% else %}
            none
          {% endif %}
        media_content_type: "audio/mp4"
    - delay: "00:00:01" #Wait before force playing (needed for some radio)
    - service: media_player.media_pause #Force pause
      data_template:
        entity_id: media_player.salotto
    - delay: "00:00:01" #Wait before force playing (needed for some radio)
    - service_template: >
        {% if is_state("input_select.radio_station", "-Off-") %}media_player.media_stop{% else %}media_player.media_play{% endif %}
      data_template:
        entity_id: media_player.salotto


#++++++++++++++++++++++++++++++++++++++++
#+++++ Telegram related automations +++++
#++++++++++++++++++++++++++++++++++++++++
- id: bot_cmd_start
  #Bot - Comando /start
  alias: bot_cmd_start
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: "/start"
  action:
    - service: telegram_bot.send_message
      data_template:
        message: "Ciao {{ trigger.event.data.from_first }}, scegli un comando:"
        disable_notification: true
        inline_keyboard:
          - "\U0001F4CA Sensors:/sensors, \U0001F39B Plugs/Switches:/switches"
          - "\U0001F30D Where are we?:/wherearewe"
          - "\U00002699 Configuration:/config, \U000026A1 System Commands:/systemcommands"

- id: bot_cmd_goback_start
  #Bot - Comando /goback_main
  alias: bot_cmd_goback_start
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/goback_main"
  action:
    - service: telegram_bot.edit_replymarkup
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"
        inline_keyboard:
          - "\U0001F4CA Sensors:/sensors, \U0001F39B Plugs/Switches:/switches"
          - "\U0001F30D Where are we?:/wherearewe"
          - "\U00002699 Configuration:/config, \U000026A1 System Commands:/systemcommands"

- id: bot_cmd_system
  #Bot - Comando /systemcommands
  alias: bot_cmd_system
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/systemcommands"
  action:
    - service: telegram_bot.edit_replymarkup
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"
        inline_keyboard:
          - "\U000026A1 Reload Scripts:/ha_reload_scripts, \U000026A1 Reload Automations:/ha_reload_automations"
          - "\U000026A1 Reload Customize:/ha_reload_customize"
          - "\U0001F503 Reboot Host:/ho_reboot, \U0001F501 Restart HA:/ha_restart"
          - "\U0001F50C Shutdown Host:/ho_shutdown, \U000023F9 Stop HA:/ha_stop"
#TODO CANCELLARE IL TEST
#        - "\U0001F5E3 Speak:/speak_generic"
          - "\U0001F519 Go back:/goback_main"

- id: bot_cmd_sensors
  #Bot - Comando /sensors
  alias: bot_cmd_sensors
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/sensors"
  action:
    - service: telegram_bot.edit_replymarkup
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"
        inline_keyboard:
          - "\U00000030\U000020E3 Home:/sensors_home"
          - "\U00000031\U000020E3 Devices:/sensors_devices, \U00000032\U000020E3 Mobile Dev.:/sensors_mobiledevices"
          - "\U00000033\U000020E3 Raspberry PI:/sensors_raspberry, \U00000034\U000020E3 Router (FritzBox):/sensors_router"
          - "\U00000035\U000020E3 AdGuard:/sensors_adguard, \U00000036\U000020E3 NAS (Qnap):/sensors_nas"
          - "\U0001F519 Go back:/goback_main"

- id: bot_cmd_sensors_home
  #Bot - Comando /sensors_home
  alias: bot_cmd_sensors_home
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/sensors_home"
  action:
    - service: telegram_bot.edit_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.user_id }}"
        message: >
          *- Home -*
            *ModalitÃ :* {%- if is_state('input_select.home_mode', 'notte') %}{{"\U0001F303"}}{% else %}{{"\U00002600"}}{% endif %}{{states('input_select.home_mode')}}
            *{{state_attr('binary_sensor.home_anyone_in', 'friendly_name')}}:* {{states('binary_sensor.home_anyone_in')}}
            *ElettricitÃ :*
              *Consumo attuale:* {% if is_state('binary_sensor.online_pzem_004t', 'on') %}{{ states('sensor.pzem_power') }} {{state_attr('sensor.pzem_power', 'unit_of_measurement')}}{% else %}N/A{% endif %}
              *Consumo oggi:* {% if is_state('binary_sensor.online_pzem_004t', 'on') %}{{ states('sensor.pzem_energy_today').replace(".", ",") }} {{state_attr('sensor.pzem_energy_today', 'unit_of_measurement')}}{% else %}N/A{% endif %}
              *Consumo ieri:* {% if is_state('binary_sensor.online_pzem_004t', 'on') %}{{ states('sensor.pzem_energy_yesterday').replace(".", ",") }} {{state_attr('sensor.pzem_energy_yesterday', 'unit_of_measurement')}}{% else %}N/A{% endif %}
        inline_keyboard:
          - "Imposta modalitÃ  {% if is_state('input_select.home_mode', 'giorno') %}notte{% else %}giorno{% endif %}:/sensors_home_mode_toggle"
          - "\U0001F4AB Refresh:/sensors_home, \U0001F519 Go back:/sensors"

- id: bot_cmd_sensors_home_mode_toggle
  #Bot - Comando /sensors_home_mode_toggle
  alias: bot_cmd_sensors_home_mode_toggle
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/sensors_home_mode_toggle"
  action:
    - service: script.toggle_home_mode
    - service: notify.telegram_paolo
      data_template:
        message: >
          Impostata modalitÃ  {{states('input_select.home_mode')}}
        inline_keyboard:
          - "Imposta modalitÃ  {% if is_state('input_select.home_mode', 'giorno') %}notte{% else %}giorno{% endif %}:/sensors_home_mode_toggle"
          - "\U0001F4AB Refresh:/sensors_home, \U0001F519 Go back:/goback_main"

- id: bot_cmd_switches
  #Bot - Comando /switches
  alias: bot_cmd_switches
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches"
  action:
    - service: telegram_bot.edit_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.user_id }}"
        message: >
          *- Plugs & Switches -*
            *Sonoff Basic*
              *{% if not is_state('switch.sonoff_basic_1', 'unknown') %}{{state_attr('switch.sonoff_basic_1', 'friendly_name')}}{% else %}Sonoff Basic 1{% endif %}:*
              {%- if is_state('switch.sonoff_basic_1', 'unavailable') %} {{"\U000026D4"}} Disconnected{% elif is_state('switch.sonoff_basic_1', 'on') %} {{"\U00002705"}} On{% elif is_state('switch.sonoff_basic_1', 'off') %} {{"\U0000274C"}} Off{% endif %}
              *{% if not is_state('switch.sonoff_basic_2', 'unknown') %}{{state_attr('switch.sonoff_basic_2', 'friendly_name')}}{% else %}Sonoff Basic 2{% endif %}:*
              {%- if is_state('switch.sonoff_basic_2', 'unavailable') %} {{"\U000026D4"}} Disconnected{% elif is_state('switch.sonoff_basic_2', 'on') %} {{"\U00002705"}} On{% elif is_state('switch.sonoff_basic_2', 'off') %} {{"\U0000274C"}} Off{% endif %}
              *{% if not is_state('switch.sonoff_basic_3', 'unknown') %}{{state_attr('switch.sonoff_basic_3', 'friendly_name')}}{% else %}Sonoff Basic 3{% endif %}:*
              {%- if is_state('switch.sonoff_basic_3', 'unavailable') %} {{"\U000026D4"}} Disconnected{% elif is_state('switch.sonoff_basic_3', 'on') %} {{"\U00002705"}} On{% elif is_state('switch.sonoff_basic_3', 'off') %} {{"\U0000274C"}} Off{% endif %}
            *Smart Plug*
              *{% if not is_state('switch.smartplug_1', 'unknown') %}{{state_attr('switch.smartplug_1', 'friendly_name')}}{% else %}Smart Plug 1{% endif %}:*
              {%- if is_state('switch.smartplug_1', 'unavailable') %} {{"\U000026D4"}} Disconnected{% elif is_state('switch.smartplug_1', 'on') %} {{"\U00002705"}} On{% elif is_state('switch.smartplug_1', 'off') %} {{"\U0000274C"}} Off{% endif %}
              *{% if not is_state('switch.smartplug_2', 'unknown') %}{{state_attr('switch.smartplug_2', 'friendly_name')}}{% else %}Smart Plug 2{% endif %}:*
              {%- if is_state('switch.smartplug_2', 'unavailable') %} {{"\U000026D4"}} Disconnected{% elif is_state('switch.smartplug_2', 'on') %} {{"\U00002705"}} On{% elif is_state('switch.smartplug_2', 'off') %} {{"\U0000274C"}} Off{% endif %}
              *{% if not is_state('switch.smartplug_3', 'unknown') %}{{state_attr('switch.smartplug_3', 'friendly_name')}}{% else %}Smart Plug 3{% endif %}:*
              {%- if is_state('switch.smartplug_3', 'unavailable') %} {{"\U000026D4"}} Disconnected{% elif is_state('switch.smartplug_3', 'on') %} {{"\U00002705"}} On{% elif is_state('switch.smartplug_3', 'off') %} {{"\U0000274C"}} Off{% endif %}
              *{% if not is_state('switch.smartplug_4', 'unknown') %}{{state_attr('switch.smartplug_4', 'friendly_name')}}{% else %}Smart Plug 3{% endif %}:*
              {%- if is_state('switch.smartplug_4', 'unavailable') %} {{"\U000026D4"}} Disconnected{% elif is_state('switch.smartplug_4', 'on') %} {{"\U00002705"}} On{% elif is_state('switch.smartplug_4', 'off') %} {{"\U0000274C"}} Off{% endif %}
              *{% if not is_state('switch.smartplug_5', 'unknown') %}{{state_attr('switch.smartplug_5', 'friendly_name')}}{% else %}Smart Plug 3{% endif %}:*
              {%- if is_state('switch.smartplug_5', 'unavailable') %} {{"\U000026D4"}} Disconnected{% elif is_state('switch.smartplug_5', 'on') %} {{"\U00002705"}} On{% elif is_state('switch.smartplug_5', 'off') %} {{"\U0000274C"}} Off{% endif %}
              *{% if not is_state('switch.smartplug_6', 'unknown') %}{{state_attr('switch.smartplug_6', 'friendly_name')}}{% else %}Smart Plug 3{% endif %}:*
              {%- if is_state('switch.smartplug_6', 'unavailable') %} {{"\U000026D4"}} Disconnected{% elif is_state('switch.smartplug_6', 'on') %} {{"\U00002705"}} On{% elif is_state('switch.smartplug_6', 'off') %} {{"\U0000274C"}} Off{% endif %}
              *{% if not is_state('switch.smartplug_7', 'unknown') %}{{state_attr('switch.smartplug_7', 'friendly_name')}}{% else %}Smart Plug 3{% endif %}:*
              {%- if is_state('switch.smartplug_7', 'unavailable') %} {{"\U000026D4"}} Disconnected{% elif is_state('switch.smartplug_7', 'on') %} {{"\U00002705"}} On{% elif is_state('switch.smartplug_7', 'off') %} {{"\U0000274C"}} Off{% endif %}
              *{% if not is_state('switch.smartplug_8', 'unknown') %}{{state_attr('switch.smartplug_8', 'friendly_name')}}{% else %}Smart Plug 3{% endif %}:*
              {%- if is_state('switch.smartplug_8', 'unavailable') %} {{"\U000026D4"}} Disconnected{% elif is_state('switch.smartplug_8', 'on') %} {{"\U00002705"}} On{% elif is_state('switch.smartplug_8', 'off') %} {{"\U0000274C"}} Off{% endif %}
        inline_keyboard:
          - "{%- if is_state('switch.sonoff_basic_1', 'on') %}{{'\U0001F7E1'}}{% elif is_state('switch.sonoff_basic_1', 'off') %}{{'\U000026AB'}}{% else %}{{'\U000026D4'}}{% endif %} {{state_attr('switch.sonoff_basic_1', 'friendly_name')}}:/switches_toggle_sonoff_basic_1, {%- if is_state('switch.sonoff_basic_2', 'on') %}{{'\U0001F7E1'}}{% elif is_state('switch.sonoff_basic_2', 'off') %}{{'\U000026AB'}}{% else %}{{'\U000026D4'}}{% endif %} {{state_attr('switch.sonoff_basic_2', 'friendly_name')}}:/switches_toggle_sonoff_basic_2"
          - "{%- if is_state('switch.smartplug_1', 'on') %}{{'\U0001F7E1'}}{% elif is_state('switch.smartplug_1', 'off') %}{{'\U000026AB'}}{% else %}{{'\U000026D4'}}{% endif %} {{state_attr('switch.smartplug_1', 'friendly_name')}}:/switches_toggle_plug1, {%- if is_state('switch.smartplug_2', 'on') %}{{'\U0001F7E1'}}{% elif is_state('switch.smartplug_2', 'off') %}{{'\U000026AB'}}{% else %}{{'\U000026D4'}}{% endif %} {{state_attr('switch.smartplug_2', 'friendly_name')}}:/switches_toggle_plug2"
          - "{%- if is_state('switch.smartplug_3', 'on') %}{{'\U0001F7E1'}}{% elif is_state('switch.smartplug_3', 'off') %}{{'\U000026AB'}}{% else %}{{'\U000026D4'}}{% endif %} {{state_attr('switch.smartplug_3', 'friendly_name')}}:/switches_toggle_plug3, {%- if is_state('switch.smartplug_4', 'on') %}{{'\U0001F7E1'}}{% elif is_state('switch.smartplug_4', 'off') %}{{'\U000026AB'}}{% else %}{{'\U000026D4'}}{% endif %} {{state_attr('switch.smartplug_4', 'friendly_name')}}:/switches_toggle_plug4"
          - "{%- if is_state('switch.smartplug_5', 'on') %}{{'\U0001F7E1'}}{% elif is_state('switch.smartplug_5', 'off') %}{{'\U000026AB'}}{% else %}{{'\U000026D4'}}{% endif %} {{state_attr('switch.smartplug_5', 'friendly_name')}}:/switches_toggle_plug5, {%- if is_state('switch.smartplug_6', 'on') %}{{'\U0001F7E1'}}{% elif is_state('switch.smartplug_6', 'off') %}{{'\U000026AB'}}{% else %}{{'\U000026D4'}}{% endif %} {{state_attr('switch.smartplug_6', 'friendly_name')}}:/switches_toggle_plug6"
          - "{%- if is_state('switch.smartplug_7', 'on') %}{{'\U0001F7E1'}}{% elif is_state('switch.smartplug_7', 'off') %}{{'\U000026AB'}}{% else %}{{'\U000026D4'}}{% endif %} {{state_attr('switch.smartplug_7', 'friendly_name')}}:/switches_toggle_plug7, {%- if is_state('switch.smartplug_8', 'on') %}{{'\U0001F7E1'}}{% elif is_state('switch.smartplug_8', 'off') %}{{'\U000026AB'}}{% else %}{{'\U000026D4'}}{% endif %} {{state_attr('switch.smartplug_8', 'friendly_name')}}:/switches_toggle_plug8"
          - "\U0001F53C Cover Up:/switches_cover_up, \U000023F9 Stop:/switches_cover_stop, \U0001F53D Cover Down:/switches_cover_down"
          - "\U0001F4AB Refresh:/switches, \U0001F519 Go back:/goback_main"

- id: bot_cmd_switches_toggle_plug1
  #Bot - Comando /switches_toggle_plug1
  alias: bot_cmd_switches_toggle_plug1
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_toggle_plug1"
  action:
    - service: switch.toggle
      data:
        entity_id: switch.smartplug_1
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if is_state('switch.smartplug_1', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F44D"}} Comando eseguito ({{states('switch.smartplug_1') | upper()}}).{% endif %}

- id: bot_cmd_switches_toggle_plug2
  #Bot - Comando /switches_toggle_plug2
  alias: bot_cmd_switches_toggle_plug2
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_toggle_plug2"
  action:
    - service: switch.toggle
      data:
        entity_id: switch.smartplug_2
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if is_state('switch.smartplug_2', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F44D"}} Comando eseguito ({{states('switch.smartplug_2') | upper()}}).{% endif %}

- id: bot_cmd_switches_toggle_plug3
  #Bot - Comando /switches_toggle_plug3
  alias: bot_cmd_switches_toggle_plug3
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_toggle_plug3"
  action:
    - service: switch.toggle
      data:
        entity_id: switch.smartplug_3
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if is_state('switch.smartplug_3', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F44D"}} Comando eseguito ({{states('switch.smartplug_3') | upper()}}).{% endif %}

- id: bot_cmd_switches_toggle_plug4
  #Bot - Comando /switches_toggle_plug4
  alias: bot_cmd_switches_toggle_plug4
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_toggle_plug4"
  action:
    - service: switch.toggle
      data:
        entity_id: switch.smartplug_4
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if is_state('switch.smartplug_4', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F44D"}} Comando eseguito ({{states('switch.smartplug_4') | upper()}}).{% endif %}

- id: bot_cmd_switches_toggle_plug5
  #Bot - Comando /switches_toggle_plug5
  alias: bot_cmd_switches_toggle_plug5
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_toggle_plug5"
  action:
    - service: switch.toggle
      data:
        entity_id: switch.smartplug_5
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if is_state('switch.smartplug_5', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F44D"}} Comando eseguito ({{states('switch.smartplug_5') | upper()}}).{% endif %}

- id: bot_cmd_switches_toggle_plug6
  #Bot - Comando /switches_toggle_plug6
  alias: bot_cmd_switches_toggle_plug6
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_toggle_plug6"
  action:
    - service: switch.toggle
      data:
        entity_id: switch.smartplug_6
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if is_state('switch.smartplug_6', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F44D"}} Comando eseguito ({{states('switch.smartplug_6') | upper()}}).{% endif %}

- id: bot_cmd_switches_toggle_plug7
  #Bot - Comando /switches_toggle_plug7
  alias: bot_cmd_switches_toggle_plug7
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_toggle_plug7"
  action:
    - service: switch.toggle
      data:
        entity_id: switch.smartplug_7
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if is_state('switch.smartplug_7', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F44D"}} Comando eseguito ({{states('switch.smartplug_7') | upper()}}).{% endif %}

- id: bot_cmd_switches_toggle_plug8
  #Bot - Comando /switches_toggle_plug8
  alias: bot_cmd_switches_toggle_plug8
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_toggle_plug8"
  action:
    - service: switch.toggle
      data:
        entity_id: switch.smartplug_8
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if is_state('switch.smartplug_8', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F44D"}} Comando eseguito ({{states('switch.smartplug_8') | upper()}}).{% endif %}

- id: bot_cmd_switches_toggle_sonoff_basic_1
  #Bot - Comando /switches_toggle_sonoff_basic_1
  alias: bot_cmd_switches_toggle_sonoff_basic_1
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_toggle_sonoff_basic_1"
  action:
    - service: switch.toggle
      data:
        entity_id: switch.sonoff_basic_1
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if is_state('switch.sonoff_basic_1', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F44D"}} Comando eseguito ({% if is_state('switch.sonoff_basic_1', 'on') %}OFF{% else %}ON{% endif %}).{% endif %}

- id: bot_cmd_switches_toggle_sonoff_basic_2
  #Bot - Comando /switches_toggle_sonoff_basic_2
  alias: bot_cmd_switches_toggle_sonoff_basic_2
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_toggle_sonoff_basic_2"
  action:
    - service: switch.toggle
      data:
        entity_id: switch.sonoff_basic_2
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if is_state('switch.sonoff_basic_2', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F44D"}} Comando eseguito ({% if is_state('switch.sonoff_basic_2', 'on') %}OFF{% else %}ON{% endif %}).{% endif %}

# - id: bot_cmd_switches_toggle_sonoff_basic_3
#   #Bot - Comando /switches_toggle_sonoff_basic_3
#   alias: bot_cmd_switches_toggle_sonoff_basic_3
#   trigger:
#     platform: event
#     event_type: telegram_callback
#     event_data:
#       data: "/switches_toggle_sonoff_basic_3"
#   action:
#     - service: switch.toggle
#       data:
#         entity_id: switch.sonoff_basic_3
#     - service: notify.telegram_paolo
#       data_template:
#         message: >
#           {% if is_state('switch.sonoff_basic_3', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F44D"}} Comando eseguito ({% if is_state('switch.sonoff_basic_3', 'on') %}OFF{% else %}ON{% endif %}).{% endif %}

- id: bot_cmd_switches_cover_up
  #Bot - Comando /switches_cover_up
  alias: bot_cmd_switches_cover_up
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_cover_up"
  action:
    - service: script.home_cover_up
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if is_state('switch.sonoff_dual_1', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F53C"}} Cover up.{% endif %}

- id: bot_cmd_switches_cover_down
  #Bot - Comando /switches_cover_down
  alias: bot_cmd_switches_cover_down
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_cover_down"
  action:
    - service: script.home_cover_down
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if is_state('switch.sonoff_dual_2', 'unavailable') %}{{"\U0000274C"}} Comando NON eseguito.{% else %}{{"\U0001F53D"}} Cover down.{% endif %}

- id: bot_cmd_switches_cover_stop
  #Bot - Comando /switches_cover_stop
  alias: bot_cmd_switches_cover_stop
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/switches_cover_stop"
  action:
    - service: script.home_cover_stop
    - service: notify.telegram_paolo
      data_template:
        message: >
          {{"\U000023F9"}} Cover stopped.

- id: bot_cmd_config
  #Bot - Comando /config
  alias: bot_cmd_config
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/config"
  action:
    - service: telegram_bot.edit_replymarkup
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"
        inline_keyboard:
          - "\U0001F4BE Commit config to Git:/config_commit_git"
          - "\U0001F4F7 Create full snapshot:/snapshot_full_create"
          - "\U0001F519 Go back:/goback_main"

- id: bot_cmd_config_commit_git
  #Bot - Comando /config_commit_git
  alias: bot_cmd_config_commit_git
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/config_commit_git"
  action:
    - service: telegram_bot.send_message
      data_template:
        message: "Confermi l'operazione?"
        disable_notification: true
        inline_keyboard:
          - "\U0001F44D Yes:/config_commit_git_confirm, \U0001F44E No:/config_commit_git_cancel"

- id: bot_cmd_config_commit_git_confirm
  #Bot - Comando /config_commit_git_confirm
  alias: bot_cmd_config_commit_git_confirm
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/config_commit_git_confirm"
  action:
    - service: telegram_bot.delete_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"
    - service: script.config_commit_to_git

- id: bot_cmd_config_commit_git_cancel
  #Bot - Comando /config_commit_git_cancel
  alias: bot_cmd_config_commit_git_cancel
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/config_commit_git_cancel"
  action:
    - service: telegram_bot.delete_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"

- id: bot_cmd_config_snapshot_full
  #Bot - Comando /snapshot_full_create
  alias: bot_cmd_config_snapshot_full
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/snapshot_full_create"
  action:
    - service: telegram_bot.send_message
      data_template:
        message: "Confermi l'operazione?"
        disable_notification: true
        inline_keyboard:
          - "\U0001F44D Yes:/snapshot_full_create_confirm, \U0001F44E No:/snapshot_full_create_cancel"

- id: bot_cmd_config_snapshot_full_confirm
  #Bot - Comando /snapshot_full_create_confirm
  alias: bot_cmd_config_snapshot_full_confirm
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/snapshot_full_create_confirm"
  action:
    - service: telegram_bot.delete_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"
    - service: script.snapshot_full_create

- id: bot_cmd_config_snapshot_full_cancel
  #Bot - Comando /snapshot_full_create_cancel
  alias: bot_cmd_config_snapshot_full_cancel
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/snapshot_full_create_cancel"
  action:
    - service: telegram_bot.delete_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"

- id: bot_cmd_wherearewe
  #Bot - Comando /wherearewe
  alias: bot_cmd_wherearewe
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/wherearewe"
  action:
    - service: telegram_bot.edit_replymarkup
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"
        inline_keyboard:
          - "\U00000031\U000020E3 Paolo:/wherearewe_paolo, \U00000032\U000020E3 Silvia:/wherearewe_silvia"
          - "\U0001F519 Go back:/goback_main"

- id: bot_cmd_wherearewe_paolo
  #Bot - Comando /wherearewe_paolo
  alias: bot_cmd_wherearewe_paolo
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/wherearewe_paolo"
  action:
    - service: telegram_bot.edit_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.user_id }}"
        message: >
          *- Where is Paolo? -*
            *{{state_attr('device_tracker.cell_paolo', 'friendly_name')}}:* {{states('device_tracker.cell_paolo') | replace("not_home","away")}}
            *{{state_attr('sensor.cell_paolo_lat', 'friendly_name')}}:* {{states('sensor.cell_paolo_lat')}}
            *{{state_attr('sensor.cell_paolo_long', 'friendly_name')}}:* {{states('sensor.cell_paolo_long')}}
            *{{state_attr('sensor.cell_paolo_accuracy', 'friendly_name')}}:* {{states('sensor.cell_paolo_accuracy')}} {{state_attr('sensor.cell_paolo_accuracy', 'unit_of_measurement')}}
            *{{state_attr('sensor.cell_paolo_lastupdate', 'friendly_name')}}:* {{states('sensor.cell_paolo_lastupdate')}}
            *{{state_attr('sensor.cell_paolo_address', 'friendly_name')}}:* {{states('sensor.cell_paolo_address')}}
            *{{state_attr('sensor.cell_paolo_address_confidence', 'friendly_name')}}:* {{states('sensor.cell_paolo_address_confidence')}}
            *{{state_attr('sensor.cell_paolo_distance_home', 'friendly_name')}}:* {{states('sensor.cell_paolo_distance_home')}} {{state_attr('sensor.cell_paolo_distance_home', 'unit_of_measurement')}}
            *{{state_attr('sensor.cell_paolo_distance_silvia', 'friendly_name')}}:* {{states('sensor.cell_paolo_distance_silvia')}} {{state_attr('sensor.cell_paolo_distance_silvia', 'unit_of_measurement')}}
            [Map](https://dev.virtualearth.net/REST/V1/Imagery/Map/Road/{{states('sensor.cell_paolo_latlong')}}/16?mapSize=400,300&format=png&pushpin={{states('sensor.cell_paolo_latlong')}};66;P&key={{states('sensor.maps_api_key')}})
        inline_keyboard:
          - "\U0001F4AB Refresh:/wherearewe_paolo, \U0001F519 Go back:/wherearewe"

- id: bot_cmd_wherearewe_silvia
  #Bot - Comando /wherearewe_silvia
  alias: bot_cmd_wherearewe_silvia
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/wherearewe_silvia"
  action:
    - service: telegram_bot.edit_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.user_id }}"
        message: >
          *- Where is Silvia? -*
            *{{state_attr('device_tracker.cell_silvia', 'friendly_name')}}:* {{states('device_tracker.cell_silvia') | replace("not_home","away")}}
            *{{state_attr('sensor.cell_silvia_lat', 'friendly_name')}}:* {{states('sensor.cell_silvia_lat')}}
            *{{state_attr('sensor.cell_silvia_long', 'friendly_name')}}:* {{states('sensor.cell_silvia_long')}}
            *{{state_attr('sensor.cell_silvia_accuracy', 'friendly_name')}}:* {{states('sensor.cell_silvia_accuracy')}} {{state_attr('sensor.cell_silvia_accuracy', 'unit_of_measurement')}}
            *{{state_attr('sensor.cell_silvia_lastupdate', 'friendly_name')}}:* {{states('sensor.cell_silvia_lastupdate')}}
            *{{state_attr('sensor.cell_silvia_address', 'friendly_name')}}:* {{states('sensor.cell_silvia_address')}}
            *{{state_attr('sensor.cell_silvia_address_confidence', 'friendly_name')}}:* {{states('sensor.cell_silvia_address_confidence')}}
            *{{state_attr('sensor.cell_silvia_distance_home', 'friendly_name')}}:* {{states('sensor.cell_silvia_distance_home')}} {{state_attr('sensor.cell_silvia_distance_home', 'unit_of_measurement')}}
            *{{state_attr('sensor.cell_silvia_distance_paolo', 'friendly_name')}}:* {{states('sensor.cell_silvia_distance_paolo')}} {{state_attr('sensor.cell_silvia_distance_paolo', 'unit_of_measurement')}}
            [Map](https://dev.virtualearth.net/REST/V1/Imagery/Map/Road/{{states('sensor.cell_silvia_latlong')}}/16?mapSize=400,300&format=png&pushpin={{states('sensor.cell_silvia_latlong')}};64;S&key={{states('sensor.maps_api_key')}})
        inline_keyboard:
          - "\U0001F4AB Refresh:/wherearewe_silvia, \U0001F519 Go back:/wherearewe"

- id: bot_cmd_system_ha_reload_customize
  #Bot - Comando /ha_reload_customize
  alias: bot_cmd_system_ha_reload_customize
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ha_reload_customize"
  action:
    - service: script.hass_reload_customize

- id: bot_cmd_system_ha_reload_scripts
  #Bot - Comando /ha_reload_scripts
  alias: bot_cmd_system_ha_reload_scripts
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ha_reload_scripts"
  action:
    - service: script.hass_reload_scripts

- id: bot_cmd_system_ha_reload_automations
  #Bot - Comando /ha_reload_automations
  alias: bot_cmd_system_ha_reload_automations
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ha_reload_automations"
  action:
    - service: script.hass_reload_automations

- id: bot_cmd_system_ha_restart
  #Bot - Comando /ha_restart
  alias: bot_cmd_system_ha_restart
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ha_restart"
  action:
    - service: telegram_bot.send_message
      data_template:
        message: "Confermi l'operazione?"
        disable_notification: true
        inline_keyboard:
          - "\U0001F44D Yes:/ha_restart_confirm, \U0001F44E No:/ha_restart_cancel"

- id: bot_cmd_system_ha_restart_confirm
  #Bot - Comando /ha_restart_confirm
  alias: bot_cmd_system_ha_restart_confirm
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ha_restart_confirm"
  action:
    - service: telegram_bot.delete_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"
    - service: script.hass_restart

- id: bot_cmd_system_ha_restart_cancel
  #Bot - Comando /ha_restart_cancel
  alias: bot_cmd_system_ha_restart_cancel
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ha_restart_cancel"
  action:
    - service: telegram_bot.delete_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"

- id: bot_cmd_system_ha_stop
  #Bot - Comando /ha_stop
  alias: bot_cmd_system_ha_stop
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ha_stop"
  action:
    - service: telegram_bot.send_message
      data_template:
        message: "Confermi l'operazione?"
        disable_notification: true
        inline_keyboard:
          - "\U0001F44D Yes:/ha_stop_confirm, \U0001F44E No:/ha_stop_cancel"

- id: bot_cmd_system_ha_stop_confirm
  #Bot - Comando /ha_stop_confirm
  alias: bot_cmd_system_ha_stop_confirm
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ha_stop_confirm"
  action:
    - service: telegram_bot.delete_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"
    - service: script.hass_stop

- id: bot_cmd_system_ha_stop_cancel
  #Bot - Comando /ha_stop_cancel
  alias: bot_cmd_system_ha_stop_cancel
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ha_stop_cancel"
  action:
    - service: telegram_bot.delete_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"

- id: bot_cmd_system_ho_shutdown
  #Bot - Comando /ho_shutdown
  alias: bot_cmd_system_ho_shutdown
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ho_shutdown"
  action:
    - service: telegram_bot.send_message
      data_template:
        message: "Confermi l'operazione?"
        disable_notification: true
        inline_keyboard:
          - "\U0001F44D Yes:/ho_shutdown_confirm, \U0001F44E No:/ho_shutdown_cancel"

- id: bot_cmd_system_ho_shutdown_confirm
  #Bot - Comando /ho_shutdown_confirm
  alias: bot_cmd_system_ho_shutdown_confirm
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ho_shutdown_confirm"
  action:
    - service: telegram_bot.delete_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"
    - service: script.hass_server_shutdown

- id: bot_cmd_system_ho_shutdown_cancel
  #Bot - Comando /ho_shutdown_cancel
  alias: bot_cmd_system_ho_shutdown_cancel
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ho_shutdown_cancel"
  action:
    - service: telegram_bot.delete_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"

- id: bot_cmd_system_ho_reboot
  #Bot - Comando /ho_reboot
  alias: bot_cmd_system_ho_reboot
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ho_reboot"
  action:
    - service: telegram_bot.send_message
      data_template:
        message: "Confermi l'operazione?"
        disable_notification: true
        inline_keyboard:
          - "\U0001F44D Yes:/ho_reboot_confirm, \U0001F44E No:/ho_reboot_cancel"

- id: bot_cmd_system_ho_reboot_confirm
  #Bot - Comando /ho_reboot_confirm
  alias: bot_cmd_system_ho_reboot_confirm
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ho_reboot_confirm"
  action:
    - service: telegram_bot.delete_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"
    - service: script.hass_server_reboot

- id: bot_cmd_system_ho_reboot_cancel
  #Bot - Comando /ho_reboot_cancel
  alias: bot_cmd_system_ho_reboot_cancel
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/ho_reboot_cancel"
  action:
    - service: telegram_bot.delete_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.chat_id }}"

- id: bot_cmd_sensors_router
  #Bot - Comando /sensors_router
  alias: bot_cmd_sensors_router
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/sensors_router"
  action:
    - service: telegram_bot.edit_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.user_id }}"
        message: >
          *- FritzBox sensors -*{% if not is_state('binary_sensor.online_router_fritzbox', 'unknown') and is_state('binary_sensor.online_router_fritzbox', 'on')%}
            *Status:* {% if not is_state('sensor.fritz_netmonitor', 'unknown') %}{{states('sensor.fritz_netmonitor')}}{% else %}N/A{% endif %}
            *Uptime:* {% if not is_state('sensor.fritz_attr_uptime', 'unknown') %}{{states('sensor.fritz_attr_uptime')}} {{state_attr('sensor.fritz_attr_uptime', 'unit_of_measurement')}}{% else %}N/A{% endif %}
            *External IP:* {% if not is_state('sensor.fritz_attr_external_ip', 'unknown') %}{{states('sensor.fritz_attr_external_ip')}}{% else %}N/A{% endif %}
            *Connection*
              *Linked to provider:* {% if not is_state('sensor.fritz_attr_is_linked', 'unknown') %}{{states('sensor.fritz_attr_is_linked')}}{% else %}N/A{% endif %}
              *Internet connected:* {% if not is_state('sensor.fritz_attr_is_connected', 'unknown') %}{{states('sensor.fritz_attr_is_connected')}}{% else %}N/A{% endif %}
              *Sent:* {% if not is_state('sensor.fritz_attr_sent_mb', 'unknown') %}{{states('sensor.fritz_attr_sent_mb')}} {{state_attr('sensor.fritz_attr_sent_mb', 'unit_of_measurement')}}{% else %}N/A{% endif %}
              *Received:* {% if not is_state('sensor.fritz_attr_received_mb', 'unknown') %}{{states('sensor.fritz_attr_received_mb')}} {{state_attr('sensor.fritz_attr_received_mb', 'unit_of_measurement')}}{% else %}N/A{% endif %}
              *Upstream:* {% if not is_state('sensor.fritz_attr_transmission_rate_up', 'unknown') %}{{states('sensor.fritz_attr_transmission_rate_up')}} {{state_attr('sensor.fritz_attr_transmission_rate_up', 'unit_of_measurement')}}{% else %}N/A{% endif %}
              *Downstream:* {% if not is_state('sensor.fritz_attr_transmission_rate_down', 'unknown') %}{{states('sensor.fritz_attr_transmission_rate_down')}} {{state_attr('sensor.fritz_attr_transmission_rate_down', 'unit_of_measurement')}}{% else %}N/A{% endif %}
            {% else %}
            {{"\U0000274C"}} This device is OFF or not connected.
            {% endif %}
        inline_keyboard:
          - "\U0001F4AB Refresh:/sensors_router, \U0001F519 Go back:/sensors"

- id: bot_cmd_sensors_raspberry
  #Bot - Comando /sensors_raspberry
  alias: bot_cmd_sensors_raspberry
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/sensors_raspberry"
  action:
    - service: telegram_bot.edit_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.user_id }}"
        message: >
          *- Raspberry sensors -*
            {% if not is_state('sensor.last_boot_verbose', 'unknown') -%}
              *{{state_attr('sensor.last_boot_verbose', 'friendly_name')}}:*
              {{states('sensor.last_boot_verbose')}} {{state_attr('sensor.last_boot_verbose', 'unit_of_measurement')}}
            {% endif -%}
            *CPU temperature:* {% if not is_state('sensor.cpu_temperature', 'unknown') and not is_state('sensor.cpu_temperature', 'unknown') %}{{states('sensor.cpu_temperature')}} {{state_attr('sensor.cpu_temperature', 'unit_of_measurement')}}{% else %}N/A{% endif %}
            *Processor use:* {% if not is_state('sensor.processor_use', 'unknown') %}{{states('sensor.processor_use')}} {{state_attr('sensor.processor_use', 'unit_of_measurement')}}{% else %}N/A{% endif %}
            *Memory*
              *Used:* {% if not is_state('sensor.memory_use', 'unknown') %}{{states('sensor.memory_use')}} {{state_attr('sensor.memory_use', 'unit_of_measurement')}}{% else %}N/A{% endif %} ({% if not is_state('sensor.memory_use_percent', 'unknown') %}{{states('sensor.memory_use_percent')}} {{state_attr('sensor.memory_use_percent', 'unit_of_measurement')}}{% else %}N/A{% endif %})
              *Free:* {% if not is_state('sensor.memory_free', 'unknown') %}{{states('sensor.memory_free')}} {{state_attr('sensor.memory_free', 'unit_of_measurement')}}{% else %}N/A{% endif %}
            *HASS*
              *DB Size:* {% if not is_state('sensor.hass_db_filesize', 'unknown') %}{{states('sensor.hass_db_filesize')}} {{state_attr('sensor.hass_db_filesize', 'unit_of_measurement')}}{% else %}N/A{% endif %}
              *Inst. version:* {{ states('sensor.hass_installed_version') }}
              *Avail. version:* {{ state_attr('binary_sensor.updater', 'newest_version') }}
              *HACS updates:* {{ states('sensor.hacs') }}
            *Internal IPs:*
              {% if not is_state('sensor.hass_ip_address', 'unknown') %}{{states('sensor.hass_ip_address')}}{% else %}N/A{% endif %}
        inline_keyboard:
          - "\U0001F4AB Refresh:/sensors_raspberry, \U0001F519 Go back:/sensors"

- id: bot_cmd_sensors_devices
  #Bot - Comando /sensors_devices
  alias: bot_cmd_sensors_devices
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/sensors_devices"
  action:
    - service: telegram_bot.edit_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.user_id }}"
        message: >
          *- Connected devices -*
            {%- for state in states.binary_sensor if state.object_id.startswith("online_") %}
            *{% if state %}{{state.attributes.friendly_name}}{% else %}N/A{% endif %}:*
            {%- if state.state == 'on' %} {{"\U00002705"}} On{% elif state.state == 'off' %} {{"\U0000274C"}} Off{% endif %}
            {%- endfor %}
        inline_keyboard:
          - "\U0001F4AB Refresh:/sensors_devices, \U0001F519 Go back:/sensors"

- id: bot_cmd_sensors_mobiledevices
  #Bot - Comando /sensors_mobiledevices
  alias: bot_cmd_sensors_mobiledevices
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/sensors_mobiledevices"
  action:
    - service: telegram_bot.edit_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.user_id }}"
        message: >
          *- Mobile devices -*
            {{"\U0001F4F1"}} *Cell. Paolo*
              *{% if not is_state('sensor.cell_paolo_battery', 'unknown') %}{{state_attr('sensor.cell_paolo_battery', 'friendly_name')}}{% else %}Battery{% endif %}:* {{states('sensor.cell_paolo_battery')}} {{state_attr('sensor.cell_paolo_battery', 'unit_of_measurement')}} {% if is_state('sensor.cell_paolo_charging', 'True')%} {{"\U0001F50C"}}{% endif %}
              *{% if not is_state('sensor.cell_paolo_lastupdate', 'unknown') %}{{state_attr('sensor.cell_paolo_lastupdate', 'friendly_name')}}{% else %}Last update{% endif %}:* {{states('sensor.cell_paolo_lastupdate')}} {{state_attr('sensor.cell_paolo_lastupdate', 'unit_of_measurement')}}
            
            {{"\U0001F4BB"}} *Tablet Paolo*
              *{% if not is_state('sensor.tablet_paolo_battery', 'unknown') %}{{state_attr('sensor.tablet_paolo_battery', 'friendly_name')}}{% else %}Battery{% endif %}:* {{states('sensor.tablet_paolo_battery')}} {{state_attr('sensor.tablet_paolo_battery', 'unit_of_measurement')}} {% if is_state('sensor.tablet_paolo_charging', 'True')%} {{"\U0001F50C"}}{% endif %}
              *{% if not is_state('sensor.tablet_paolo_lastupdate', 'unknown') %}{{state_attr('sensor.tablet_paolo_lastupdate', 'friendly_name')}}{% else %}Last update{% endif %}:* {{states('sensor.tablet_paolo_lastupdate')}} {{state_attr('sensor.tablet_paolo_lastupdate', 'unit_of_measurement')}}
            
            {{"\U0001F4F1"}} *Cell. Silvia*
              *{% if not is_state('sensor.cell_silvia_battery', 'unknown') %}{{state_attr('sensor.cell_silvia_battery', 'friendly_name')}}{% else %}Battery{% endif %}:* {{states('sensor.cell_silvia_battery')}} {{state_attr('sensor.cell_silvia_battery', 'unit_of_measurement')}} {% if is_state('sensor.cell_silvia_charging', 'True')%} {{"\U0001F50C"}}{% endif %}
              *{% if not is_state('sensor.cell_silvia_lastupdate', 'unknown') %}{{state_attr('sensor.cell_silvia_lastupdate', 'friendly_name')}}{% else %}Last update{% endif %}:* {{states('sensor.cell_silvia_lastupdate')}} {{state_attr('sensor.cell_silvia_lastupdate', 'unit_of_measurement')}}
            
            {{"\U0001F4BB"}} *Tablet Silvia*
              *{% if not is_state('sensor.tablet_silvia_battery', 'unknown') %}{{state_attr('sensor.tablet_silvia_battery', 'friendly_name')}}{% else %}Battery{% endif %}:* {{states('sensor.tablet_silvia_battery')}} {{state_attr('sensor.tablet_silvia_battery', 'unit_of_measurement')}} {% if is_state('sensor.tablet_silvia_charging', 'True')%} {{"\U0001F50C"}}{% endif %}
              *{% if not is_state('sensor.tablet_silvia_lastupdate', 'unknown') %}{{state_attr('sensor.tablet_silvia_lastupdate', 'friendly_name')}}{% else %}Last update{% endif %}:* {{states('sensor.tablet_silvia_lastupdate')}} {{state_attr('sensor.tablet_silvia_lastupdate', 'unit_of_measurement')}}
        inline_keyboard:
          - "\U0001F4AB Refresh:/sensors_mobiledevices, \U0001F519 Go back:/sensors"

- id: bot_cmd_sensors_nas
  #Bot - Comando /sensors_nas
  alias: bot_cmd_sensors_nas
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/sensors_nas"
  action:
    - service: telegram_bot.edit_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.user_id }}"
        message: >
          *- Qnap sensors -*{% if not is_state('binary_sensor.online_nas_qnap', 'unknown') and is_state('binary_sensor.online_nas_qnap', 'on')%}
            *Model:* {% if not is_state('sensor.nas_attr_model', 'unknown') %}{{states('sensor.nas_attr_model')}}{% else %}N/A{% endif %}
            *Uptime:* {% if not is_state('sensor.nas_attr_uptime', 'unknown') %}{{states('sensor.nas_attr_uptime')}}{% else %}N/A{% endif %}
            *Temperature*
              *System:* {% if not is_state('sensor.nas_system_temperature', 'unknown') %}{{states('sensor.nas_system_temperature')}} {{state_attr('sensor.nas_system_temperature', 'unit_of_measurement')}}{% else %}N/A{% endif %}
              *Drive 1:* {% if not is_state('sensor.nas_temperature_drive_0_1', 'unknown') %}{{states('sensor.nas_temperature_drive_0_1')}} {{state_attr('sensor.nas_temperature_drive_0_1', 'unit_of_measurement')}}{% else %}N/A{% endif %}
              *Drive 2:* {% if not is_state('sensor.nas_temperature_drive_0_2', 'unknown') %}{{states('sensor.nas_temperature_drive_0_2')}} {{state_attr('sensor.nas_temperature_drive_0_2', 'unit_of_measurement')}}{% else %}N/A{% endif %}
            *Memory*
              *Used memory:* {% if not is_state('sensor.nas_memory_used', 'unknown') %}{{states('sensor.nas_memory_used')}} {{state_attr('sensor.nas_memory_used', 'unit_of_measurement')}}{% else %}N/A{% endif %} ({% if not is_state('sensor.nas_memory_usage', 'unknown') %}{{states('sensor.nas_memory_usage')}} {{state_attr('sensor.nas_memory_usage', 'unit_of_measurement')}}{% else %}N/A{% endif %})
              *Available memory:* {% if not is_state('sensor.nas_memory_available', 'unknown') %}{{states('sensor.nas_memory_available')}} {{state_attr('sensor.nas_memory_available', 'unit_of_measurement')}}{% else %}N/A{% endif %}
            *Usage*
              *CPU:* {% if not is_state('sensor.nas_cpu_usage', 'unknown') %}{{states('sensor.nas_cpu_usage')}} {{state_attr('sensor.nas_cpu_usage', 'unit_of_measurement')}}{% else %}N/A{% endif %}
              *Used space:* {% if not is_state('sensor.nas_used_space_volume1', 'unknown') %}{{states('sensor.nas_used_space_volume1')}} {{state_attr('sensor.nas_used_space_volume1', 'unit_of_measurement')}}{% else %}N/A{% endif %} ({% if not is_state('sensor.nas_volume_used_volume1', 'unknown') %}{{states('sensor.nas_volume_used_volume1')}}{{state_attr('sensor.nas_volume_used_volume1', 'unit_of_measurement')}}%{% else %}N/A{% endif %})
              *Free space:* {% if not is_state('sensor.nas_free_space_volume1', 'unknown') %}{{states('sensor.nas_free_space_volume1')}} {{state_attr('sensor.nas_free_space_volume1', 'unit_of_measurement')}}{% else %}N/A{% endif %}
            *Health*
              *System:* {% if not is_state('sensor.nas_status', 'unknown') %}{{states('sensor.nas_status')}}{% else %}N/A{% endif %}
              *Drive 1 (SMART):* {% if not is_state('sensor.nas_smart_status_drive_0_1', 'unknown') %}{{states('sensor.nas_smart_status_drive_0_1')}}{% else %}N/A{% endif %}
              *Drive 2 (SMART):* {% if not is_state('sensor.nas_smart_status_drive_0_2', 'unknown') %}{{states('sensor.nas_smart_status_drive_0_2')}}{% else %}N/A{% endif %}
            {% else %}
            {{"\U0000274C"}} This device is OFF or not connected.
            {% endif %}
        inline_keyboard:
          - "\U0001F4AB Refresh:/sensors_nas, \U0001F519 Go back:/sensors"

- id: bot_cmd_sensors_adguard
  #Bot - Comando /sensors_adguard
  alias: bot_cmd_sensors_adguard
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/sensors_adguard"
  action:
    - service: telegram_bot.edit_message
      data_template:
        message_id: "last"
        chat_id: "{{ trigger.event.data.user_id }}"
        message: >
          *- AdGuard sensors -*{% if not is_state('binary_sensor.online_adguard', 'unknown') and is_state('binary_sensor.online_adguard', 'on')%}
            *DNS queries:*
              *Total:* {% if not is_state('sensor.adguard_dns_queries', 'unknown') %}{{states('sensor.adguard_dns_queries')}}{% else %}N/A{% endif %}
              *Blocked:* {% if not is_state('sensor.adguard_dns_queries_blocked', 'unknown') %}{{states('sensor.adguard_dns_queries_blocked')}}{% else %}N/A{% endif %} ({% if not is_state('sensor.adguard_dns_queries_blocked_ratio', 'unknown') %}{{states('sensor.adguard_dns_queries_blocked_ratio')}} {{state_attr('sensor.adguard_dns_queries_blocked_ratio', 'unit_of_measurement')}}{% else %}N/A{% endif %})
            *Blocked Requests:*
              *Parental Control:* {% if not is_state('sensor.adguard_parental_control_blocked', 'unknown') %}{{states('sensor.adguard_parental_control_blocked')}}{% else %}N/A{% endif %}
              *Safe Browsing:* {% if not is_state('sensor.adguard_safe_browsing_blocked', 'unknown') %}{{states('sensor.adguard_safe_browsing_blocked')}}{% else %}N/A{% endif %}
            *Rules Count:* {% if not is_state('sensor.adguard_rules_count', 'unknown') %}{{states('sensor.adguard_rules_count')}}{% else %}N/A{% endif %}
            {% else %}
            {{"\U0000274C"}} This device is OFF or not connected.
            {% endif %}
        inline_keyboard:
          - "\U0001F4AB Refresh:/sensors_adguard, \U0001F519 Go back:/sensors"

##TODO DA COMPLETARE e VERIFICARE CON GOOGLE HOME MINI
#- id: telegram_speak_generic
##Bot - Comando /speak_generic
#alias: Respond to /speak_generic command
#trigger:
#  platform: event
#  event_type: telegram_callback
#  event_data:
#    data: "/speak_generic"
#action:
#  - service: script.tts_speak
#    data_template:
#      message2say: >
#        {{ states('input_text.speak_generic_msg') }}
##      message2say: Ciao
#      volume: "0.6"
#  - service: telegram_bot.edit_message
#    data_template:
#      message_id: "last"
#      chat_id: "{{ trigger.event.data.user_id }}"
#      message: "\U0001F197 FATTO"
#      inline_keyboard:
#        - "\U0001F519 Go back:/goback_main"


#++++++++++++++++++++++++++++++++++++++++++++++
#+++++ Mobile devices related automations +++++
#++++++++++++++++++++++++++++++++++++++++++++++
- id: xiaomi_hub_warn_wifi_change_connection
  #Avvisa quando il gateway xiaomi si connette/disconnette a/da WiFi
  alias: xiaomi_hub_warn_wifi_change_connection
  trigger:
    - platform: state
      entity_id: binary_sensor.online_xiaomi_gateway
      from: "on"
      to: "off"
    - platform: state
      entity_id: binary_sensor.online_xiaomi_gateway
      from: "off"
      to: "on"
  condition:
    - condition: state
      entity_id: input_select.home_mode
      state: "giorno"
  action:
    - service: script.tts_speak
      data_template:
        message2say: >
          {% if (trigger.to_state.state == 'on') %}
            Il gateway Xiaomi, Ã¨ connesso!
          {% elif (trigger.to_state.state == 'off') %}
            Il gateway Xiaomi, Ã¨ disconnesso!
          {% endif %}
        volume: "0.4"
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if (trigger.to_state.state == 'on') %}
            {{'\U0001F44D'}} Il gateway Xiaomi Ã¨ connesso!
          {% elif (trigger.to_state.state == 'off') %}
            {{'\U000026A0'}} Il gateway Xiaomi Ã¨ disconnesso!
          {% endif %}

- id: nas_warn_wifi_change_connection
  #Avvisa quando il Nas si connette/disconnette a/da WiFi
  alias: nas_warn_wifi_change_connection
  trigger:
    - platform: state
      entity_id: binary_sensor.online_nas_qnap
      from: "on"
      to: "off"
    - platform: state
      entity_id: binary_sensor.online_nas_qnap
      from: "off"
      to: "on"
  condition:
    - condition: state
      entity_id: input_select.home_mode
      state: "giorno"
  action:
    - service: script.tts_speak
      data_template:
        message2say: >
          {% if (trigger.to_state.state == 'on') %}
            Il Nas, Ã¨ connesso!
          {% elif (trigger.to_state.state == 'off') %}
            Il Nas, Ã¨ disconnesso!
          {% endif %}
        volume: "0.3"
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if (trigger.to_state.state == 'on') %}
            {{'\U0001F44D'}} Il Nas Ã¨ connesso!
          {% elif (trigger.to_state.state == 'off') %}
            {{'\U000026A0'}} Il Nas Ã¨ disconnesso!
          {% endif %}


#++++++++++++++++++++++++++++++++++++
#+++++ Time related automations +++++
#++++++++++++++++++++++++++++++++++++
- id: silvia_warn_time_work
  #Avvisa Silvia quando deve tornare a lavoro
  alias: silvia_warn_time_work
  trigger:
    - platform: state
      entity_id: device_tracker.cell_silvia
      from: "not_home"
      to: "home"
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.workday
        state: "on"
      - condition: state
        entity_id: input_select.home_mode
        state: "giorno"
      - condition: template
        value_template: "{{ (states('sensor.time').split(':')[0] | int) == 13 or (states('sensor.time').split(':')[0] | int) == 14 }}"
  action:
    - delay: "00:40:00"
    - service: script.tts_speak
      data_template:
        message2say: Silvia. Ã quasi ora di tornare in ufficio.
        volume: "0.6"

- id: ale_internet_timer_start
  #Avvia il timer in attivazione dello switch per la connessione internet
  alias: ale_internet_timer_start
  trigger:
    - platform: state
      entity_id: switch.fritzbox_profile_tablet_ale
      from: "off"
      to: "on"
  action:
    - service: timer.start
      data_template:
        entity_id: timer.ale_internet
        duration: >
          {{states('input_datetime.ale_internet')}}

- id: ale_internet_timer_stop
  #Interrompe il timer in disattivazione dello switch per la connessione internet
  alias: ale_internet_timer_stop
  trigger:
    - platform: state
      entity_id: switch.fritzbox_profile_tablet_ale
      from: "on"
      to: "off"
  action:
    - service: timer.finish
      data_template:
        entity_id: timer.ale_internet

- id: ale_internet_timer_complete
  #Interrompe la connessione internet a scadenza del timer
  alias: ale_internet_timer_complete
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.ale_internet
  action:
    - service: switch.turn_off
      entity_id: switch.fritzbox_profile_tablet_ale


#+++++++++++++++++++++++++++++++++++++++++
#+++++ Energy monitoring automations +++++
#+++++++++++++++++++++++++++++++++++++++++
- id: pzem_warn_wifi_change_connection
  #Avvisa quando il Pzem si connette/disconnette a/da WiFi
  alias: pzem_warn_wifi_change_connection
  trigger:
    - platform: state
      entity_id: binary_sensor.online_pzem_004t
      from: "on"
      to: "off"
    - platform: state
      entity_id: binary_sensor.online_pzem_004t
      from: "off"
      to: "on"
  action:
    - service: notify.telegram_paolo
      data_template:
        message: >
          {% if (trigger.to_state.state == 'on') %}
            {{'\U00002705'}} Il Pzem Ã¨ connesso!
          {% elif (trigger.to_state.state == 'off') %}
            {{'\U0000274C'}} Il Pzem Ã¨ disconnesso!
          {% endif %}


#++++++++++++++++++++++++++++++++++++++
#+++++ Garden related automations +++++
#++++++++++++++++++++++++++++++++++++++
- id: mower_change_status
  #Avvisa quando il tagliaerba cambia stato
  alias: mower_change_status
  trigger:
    - platform: state
      entity_id: sensor.landroid_m141_status
  condition:
    condition: template
    value_template: "{{ trigger.from_state.state != trigger.to_state.state }}"
  action:
    - service: notify.telegram_paolo
      data_template:
        message: >
          {{'\U0001F69C'}} Mower state changed:\n
            From '{{trigger.from_state.state}}' to '{{trigger.to_state.state}}'
