#++++++++++++++++++++++++++++++
#+++++ UI related scripts +++++
#++++++++++++++++++++++++++++++
persistent_notification_dismiss:
  #Chiude il pannello delle notifiche dopo qualche secondo
  alias: Persistent Notification Dismiss
  description: "Force persistent notification dismiss after few seconds."
  sequence:
    - delay: "00:00:10"
    - service: persistent_notification.dismiss
      data:
        notification_id: "9975"


#++++++++++++++++++++++++++++++++++
#+++++ System related scripts +++++
#++++++++++++++++++++++++++++++++++
hass_config_check_result:
  alias: Check Configuration
  icon: mdi:cog-box
  description: "Check Home Assistant configuration files (via Node-Red)."
  sequence:
    - event: pm_check_config
    - delay: "00:00:05" #Used to maintain switch toggled for a while

hass_reload_customize:
  alias: Reload Customize
  icon: mdi:cog-box
  description: "Reload Home Assistant core configuration."
  sequence:
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U000023F3 Reload Customize in corso..."
    - service: notify.telegram_paolo
      data:
        message: "\U000023F3 Reload Customize in corso..."
    - service: homeassistant.reload_core_config
    - service: telegram_bot.edit_message
      data:
        message_id: "last"
        chat_id: !secret telegram_chatid_paolo
        message: "\U00002705 Reload Customize effettuato."
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U0001F44D Reload Customize effettuato."

hass_reload_scripts:
  alias: Reload Scripts
  icon: mdi:script
  description: "Reload Home Assistant scripts."
  sequence:
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U000023F3 Reload Scripts in corso..."
    - service: notify.telegram_paolo
      data:
        message: "\U000023F3 Reload Scripts in corso..."
    - service: script.reload
    - service: telegram_bot.edit_message
      data:
        message_id: "last"
        chat_id: !secret telegram_chatid_paolo
        message: "\U00002705 Reload Scripts effettuato."
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U0001F44D Reload Scripts effettuato."

hass_reload_automations:
  alias: Reload Automations
  icon: mdi:home-automation
  description: "Reload Home Assistant automations."
  sequence:
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U000023F3 Reload Automations in corso..."
    - service: notify.telegram_paolo
      data:
        message: "\U000023F3 Reload Automations in corso..."
    - service: automation.reload
    - service: telegram_bot.edit_message
      data:
        message_id: "last"
        chat_id: !secret telegram_chatid_paolo
        message: "\U00002705 Reload Automations effettuato."
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U0001F44D Reload Automations effettuato."

hass_reload_themes:
  alias: Reload Themes
  icon: mdi:view-quilt
  description: "Reload Home Assistant themes."
  sequence:
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U000023F3 Reload Themes in corso..."
    - service: notify.telegram_paolo
      data:
        message: "\U000023F3 Reload Themes in corso..."
    - service: frontend.reload_themes
    - delay: "00:00:05" #Used to maintain switch toggled for a while
    - event: pm_reload_themes #Force themes reload to input_select.hass_theme_selected
    - service: telegram_bot.edit_message
      data:
        message_id: "last"
        chat_id: !secret telegram_chatid_paolo
        message: "\U00002705 Reload Themes effettuato."
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U0001F44D Reload Themes effettuato."

hass_restart:
  alias: Restart Home Assistant
  icon: mdi:restart
  description: "Restart Home Assistant."
  sequence:
    - service: persistent_notification.create
      data:
        notification_id: "9975-Restart"
        title: "Notification"
        message: "\U000023F3 Restart Home Assistant in corso..."
    - service: notify.telegram_paolo
      data:
        message: "\U000023F3 Restart Home Assistant in corso..."
    - service: homeassistant.restart

hass_stop:
  alias: Stop Home Assistant
  icon: mdi:stop-circle-outline
  description: "Stop Home Assistant."
  sequence:
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U000023F3 Stop Home Assistant in corso..."
    - service: notify.telegram_paolo
      data:
        message: "\U000023F3 Stop Home Assistant in corso..."
    - service: homeassistant.stop

hass_server_shutdown:
  alias: Shutdown Server
  icon: mdi:stop-circle
  description: "Shutdown Home Assistant server."
  sequence:
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U000023F3 Shutdown Server in corso..."
    - service: notify.telegram_paolo
      data:
        message: "\U000023F3 Shutdown Server in corso..."
    - service: hassio.host_shutdown

hass_server_reboot:
  alias: Reboot Server
  icon: mdi:restart
  description: "Reboot Home Assistant server."
  sequence:
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U000023F3 Reboot Server in corso..."
    - service: notify.telegram_paolo
      data:
        message: "\U000023F3 Reboot Server in corso..."
    - service: hassio.host_reboot

hass_recorder_purge:
  alias: Purge Recorder
  icon: mdi:delete-sweep
  description: "Purge events and states older than 7 days."
  sequence:
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U000023F3 Purge Recorder in corso..."
    - service: notify.telegram_paolo
      data:
        message: "\U000023F3 Purge Recorder in corso..."
    - service: recorder.purge
      data:
        keep_days: 7
        repack: true
    - service: notify.telegram_paolo
      data:
        message: "\U00002705 Purge Recorder effettuato."
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U0001F44D Purge Recorder effettuato."

snapshot_full_create:
  alias: Full snapshot
  icon: mdi:database-export
  description: "Perform a full snapshot."
  sequence:
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U000023F3 Full snapshot in corso..."
    - service: notify.telegram_paolo
      data:
        message: "\U000023F3 Full snapshot in corso..."
    - service: hassio.snapshot_full
      data:
        name: Backup {{ now().strftime("%Y-%m-%d %H.%M") }}
    - service: telegram_bot.edit_message
      data:
        message_id: "last"
        chat_id: !secret telegram_chatid_paolo
        message: "\U00002705 Full snapshot effettuato."
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U0001F44D Full snapshot effettuato."

config_commit_to_git:
  alias: Commit configuration to Git
  icon: mdi:git
  description: "Commit and push configuration files to Git repo."
  sequence:
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U000023F3 Commit file di configurazione in corso..."
    - service: notify.telegram_paolo
      data:
        message: "\U000023F3 Commit file di configurazione in corso..."
    - service: shell_command.config_commit_to_git
    - service: python_script.generic_actions #Alternative to standard 'delay' component
      data:
        action: time.sleep
        seconds: 10
        log_enabled: True
    - service: telegram_bot.edit_message
      data:
        message_id: "last"
        chat_id: !secret telegram_chatid_paolo
        message: "\U00002705 Commit file di configurazione effettuato."
    - service: persistent_notification.create
      data:
        notification_id: "9975"
        title: "Notification"
        message: "\U0001F44D Commit file di configurazione effettuato."

hass_reload_addon_status:
  alias: Reload Addon Status
  icon: mdi:home-automation
  description: "Reload addon status."
  sequence:
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_samba
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_adguard
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_bitwarden
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_dasshio
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_duckdns
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_nut
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_nodered
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_ssh
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_tasmoadmin
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_motioneye
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_mariadb
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_mosquitto
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_phpmyadmin
    - service: homeassistant.update_entity
      data:
        entity_id: sensor.addon_vscode


#++++++++++++++++++++++++++++++++++
#+++++ Router related scripts +++++
#++++++++++++++++++++++++++++++++++
wifi_guest_start:
  alias: Wifi Guest - Start
  description: "Start the Guest WiFi."
  sequence:
    - service: script.tts_speak
      data:
        message2say: Stò avviando la rete ospiti
        volume: "0.5"
    - service: switch.turn_on #Start guest wifi
      data:
        entity_id: switch.fritzbox_7530_guest_wifi
    - delay: "00:00:10" #Wait for guest wifi to activate
    - service: notify.telegram_paolo
      data:
        message: >
          {{"\U00002705"}} Wifi Guest attivata.
            Password: *qwerty123*
    - service: script.tts_speak
      data:
        message2say: Rete ospiti attivata. La password è... q, w, e, r, t, ipsilon, 1, 2, 3
        volume: "0.5"

wifi_guest_stop:
  alias: Wifi Guest - Stop
  description: "Stop the Guest WiFi."
  sequence:
    - service: switch.turn_off #Stop guest wifi
      data:
        entity_id: switch.fritzbox_7530_guest_wifi
    - delay: "00:00:10" #Wait for guest wifi to deactivate
    - service: notify.telegram_paolo
      data:
        message: "\U0000274C Wifi Guest disattivata."
    - service: script.tts_speak
      data:
        message2say: Rete ospiti disattivata.
        volume: "0.5"

wifi_24ghz_start:
  alias: Wifi 2.4 GHz - Start
  description: "Start the 2.4 GHz WiFi."
  sequence:
    - service: switch.turn_on #Start 2.4 ghz wifi
      data:
        entity_id: switch.fritzbox_7530_wifi
    - delay: "00:00:10" #Wait for 2.4 ghz wifi to activate
    - service: notify.telegram_paolo
      data:
        message: "\U00002705 Wifi 2.4 GHz attivata."

wifi_24ghz_stop:
  alias: Wifi 2.4 GHz - Stop
  description: "Stop the 2.4 GHz WiFi."
  sequence:
    - service: switch.turn_off #Stop 2.4 ghz wifi
      data:
        entity_id: switch.fritzbox_7530_wifi
    - delay: "00:00:10" #Wait for 2.4 ghz wifi to deactivate
    - service: notify.telegram_paolo
      data:
        message: "\U0000274C Wifi 2.4 GHz disattivata."

wifi_5ghz_start:
  alias: Wifi 5 GHz - Start
  description: "Start the 5 GHz WiFi."
  sequence:
    - service: switch.turn_on #Start 5 ghz wifi
      data:
        entity_id: switch.fritzbox_7530_wifi_5ghz
    - delay: "00:00:10" #Wait for 5 ghz wifi to activate
    - service: notify.telegram_paolo
      data:
        message: "\U00002705 Wifi 5 GHz attivata."

wifi_5ghz_stop:
  alias: Wifi 5 GHz - Stop
  description: "Stop the 5 GHz WiFi."
  sequence:
    - service: switch.turn_off #Stop 5 ghz wifi
      data:
        entity_id: switch.fritzbox_7530_wifi_5ghz
    - delay: "00:00:10" #Wait for 5 ghz wifi to deactivate
    - service: notify.telegram_paolo
      data:
        message: "\U0000274C Wifi 5 GHz disattivata."

ale_internet_start:
  alias: Ale Internet Timer - Start
  description: "Start the timer for Ale's Internet connection."
  sequence:
    - service: switch.turn_on
      data:
        entity_id: switch.fritzbox_7530_profile_ale
    - service: timer.start
      data:
        entity_id: timer.ale_internet
        duration: "{{states('input_datetime.ale_internet')}}"
    - service: python_script.hass_entities
      data:
        action: set_state
        entity_id: sensor.ale_internet_end
        state: >
          {%- if is_state('switch.fritzbox_7530_profile_ale', 'on') %}
            {{ (as_timestamp(now()) + state_attr('input_datetime.ale_internet', 'timestamp')) | timestamp_custom('%H:%M:%S') }}
          {%- else %}
            -
          {%- endif %}
    - delay: "00:00:02" #Wait before tts (let the timer start)
    - service: script.tts_speak
      data:
        message2say: >
          {%- set duration_hh = state_attr('timer.ale_internet', 'duration').split(':')[0] | int %}
          {%- set duration_mm = state_attr('timer.ale_internet', 'duration').split(':')[1] | int %}
          {%- set msg = 'Timer internet attivo' %}
          {%- if duration_hh > 0 or duration_mm > 0 %}
            {%- set msg = msg ~ ' per ' %}
          {%- endif %}
          {%- if duration_hh > 1 %}
            {%- set msg = msg ~ duration_hh ~ ' ore' %}
          {%- elif duration_hh == 1 %}
            {%- set msg = msg ~ duration_hh ~ ' ora' %}
          {%- endif %}
          {%- if duration_hh > 0 and duration_mm > 0 %}
            {%- set msg = msg ~ ' e ' %}
          {%- endif %}
          {%- if duration_mm > 1 %}
            {%- set msg = msg ~ duration_mm ~ ' minuti' %}
          {%- elif duration_mm == 1 %}
            {%- set msg = msg ~ duration_mm ~ ' minuto' %}
          {%- endif %}
          {{-msg}}
        volume: "0.5"

ale_internet_stop:
  alias: Ale Internet Timer - Stop
  description: "Stop the timer for Ale's Internet connection."
  sequence:
    - alias: Set TTS message based on timer state
      choose:
          conditions: "{{ is_state('timer.ale_internet', 'active') }}"
          sequence:
            - service: script.tts_speak
              data:
                message2say: "Timer Internet interrotto"
                volume: "0.5"
      default:
        - service: script.tts_speak
          data:
            message2say: "Timer Internet completato"
            volume: "0.5"
    - alias: Stop the timer if active
      choose:
        - alias: Stop the timer if active
          conditions:
            - condition: state
              entity_id: timer.ale_internet
              state: "active"
          sequence:
            - service: timer.cancel
              data:
                entity_id: timer.ale_internet
    - service: switch.turn_off
      entity_id: switch.fritzbox_7530_profile_ale
    - service: python_script.hass_entities
      data:
        action: set_state
        entity_id: sensor.ale_internet_end
        state: "-"


#+++++++++++++++++++++++++++++++++++++++
#+++++ TTS & sound related scripts +++++
#+++++++++++++++++++++++++++++++++++++++
tts_speak:
  #Pronuncia una frase con TTS
  alias: TTS Speak
  description: "Executes a TTS (Text-To-Speech) action."
  fields:
    message2say:
      description: "The message to be said as TTS. Use '|' for more messages to be said randomly."
      example: "Ciao|Hello"
    volume:
      description: "Volume level to be set."
      example: "0.7"
  sequence:
    - service: input_text.set_value #Elaborate message before TTS
      data:
        entity_id: input_text.tts_last_sentence
        value: "{{ message2say.split('|') | random }}"
    - service: input_datetime.set_datetime #Store last time TTS occurred
      data:
        entity_id: input_datetime.tts_last_occurred
        date: "{{ now().strftime('%Y-%m-%d') }}"
        time: "{{ now().strftime('%H:%M:%S') }}"
    - service: media_player.volume_set
      data:
        entity_id: media_player.salotto
        volume_level: "{{ volume }}"
    - service: tts.google_say
      entity_id: media_player.salotto
      data:
        message: "{{ states('input_text.tts_last_sentence') }}"

speak_generic:
  #Pronuncia il testo specificato
  alias: Pronuncia Testo
  icon: mdi:text-to-speech
  description: "Tell a TTS message via UI."
  sequence:
    - service: script.tts_speak
      data:
        message2say: "{{ states('input_text.speak_generic_msg') }}"
        volume: "{{ states('input_number.google_home_volume') }}"

play_audio_file:
  alias: Play Audio File
  description: "Plays an audio file."
  fields:
    audio_file:
      description: "The audio file to be played. Files should be placed in the 'www' folder."
      example: "/local/sounds/audio-1.mp3"
    volume:
      description: "Volume level to be set."
      example: "0.7"
  sequence:
    - service: media_player.volume_set
      data:
        entity_id: media_player.salotto
        volume_level: "{{ volume }}"
    - service: media_player.play_media
      data:
        entity_id: media_player.salotto
        media_content_id: "{{ audio_file }}"
        media_content_type: "audio/mp4"


#++++++++++++++++++++++++++++++
#+++++ TV related scripts +++++
#++++++++++++++++++++++++++++++
tv_remote_volume_up:
  alias: Volume Su
  icon: mdi:volume-plus
  description: "Turn Samsung TV's volume up."
  sequence:
    - service: media_player.volume_up
      data:
        entity_id: media_player.samsung_tv

tv_remote_volume_down:
  alias: Volume Giù
  icon: mdi:volume-minus
  description: "Turn Samsung TV's volume down."
  sequence:
    - service: media_player.volume_down
      data:
        entity_id: media_player.samsung_tv

tv_remote_volume_mute:
  alias: Volume Muto
  icon: mdi:volume-off
  description: "Mute Samsung TV's volume."
  sequence:
    - service: media_player.volume_mute
      data:
        entity_id: media_player.samsung_tv
        is_volume_muted: true

tv_remote_channel_up:
  alias: Canale Su
  icon: mdi:chevron-up
  description: "Set Samsung TV's channel up."
  sequence:
    - service: input_number.increment
      data:
        entity_id: input_number.tv_remote_channel

tv_remote_channel_down:
  alias: Canale Giù
  icon: mdi:chevron-down
  description: "Set Samsung TV's channel down."
  sequence:
    - service: input_number.decrement
      data:
        entity_id: input_number.tv_remote_channel

tv_remote_power_off:
  alias: Power Off
  icon: mdi:power
  description: "Switch Samsung TV off."
  sequence:
    - service: media_player.turn_off
      data:
        entity_id: media_player.samsung_tv


#++++++++++++++++++++++++++++++++
#+++++ Home related scripts +++++
#++++++++++++++++++++++++++++++++
set_home_mode_day:
  #Imposta la modalità casa su 'giorno'
  alias: Set Day home mode
  description: "Set home mode to 'giorno'."
  sequence:
    - service: input_select.select_option
      data:
        entity_id: input_select.home_mode
        option: "giorno"

say_goodmorning:
  #Messaggio di buongiorno
  alias: Good Morning Message
  description: "Say the 'good morning' message."
  sequence:
    - service: script.tts_speak
      data:
        message2say: >
          {% set now = now() %}
          {% set dd = ["Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato", "Domenica"] %}
          Buongiorno. Oggi è {{ dd[now.weekday()] }} {{ now.day | int }}, e sono le {{ now.strftime('%I') | int }} e {{ now.strftime('%M') | int }}.
        volume: "0.5"
    - wait_template: "{{ states('media_player.salotto') != 'playing' }}"
    - service: script.tts_speak
      data:
        message2say: >
          Fuori ci sono {{ states('sensor.dark_sky_temperature') | round }} gradi.
          Il tempo previsto è: {{ states('sensor.dark_sky_summary') }}.
          {% if (states('sensor.dark_sky_precip_probability') | int) > 0 %}
          Attenzione: Oggi potrebbe piovere!
          {% endif %}
        volume: "0.5"
    - wait_template: "{{ states('media_player.salotto') != 'playing' }}"
    - service: script.tts_speak
      data:
        message2say: Ecco le ultime notizie.
        volume: "0.5"
    - wait_template: "{{ states('media_player.salotto') != 'playing' }}"
    - service: media_player.volume_set
      data:
        entity_id: media_player.salotto
        volume_level: "0.4"
    - service: media_player.play_media #Play TGCom24 news
      data:
        entity_id: media_player.salotto
        media_content_id: https://podcast.unitedradio.it/105.net/NEW/upload/uploadedContent/repliche/tgcom24/tgcom24.mp3
        media_content_type: "audio/mp4"

set_home_mode_night:
  #Imposta la modalità casa su 'notte'
  alias: Set Night home mode
  description: "Set home mode to 'notte'."
  sequence:
    - service: input_select.select_option
      data:
        entity_id: input_select.home_mode
        option: "notte"
    - service: script.tts_speak
      data:
        message2say: Verifica che il cancello e la porta di ingresso siano chiuse.
        volume: "0.3"
    - wait_template: "{{ states('media_player.salotto') != 'playing' }}"
    - service: script.tts_speak
      data:
        message2say: Buonanotte.
        volume: "0.3"

toggle_home_mode:
  #Cambia la modalità casa
  alias: Toggle Home Mode
  description: "Toggle home mode from 'notte' to 'giorno' or viceversa."
  sequence:
    - service: >
        {% if is_state('input_select.home_mode', 'giorno') %}
          script.set_home_mode_night
        {% else %}
          script.set_home_mode_day
        {% endif %}

home_contarina_pick_tomorrow:
  alias: Contarina Pick
  description: "Avvisa se c'è una raccolta della spazzatura il giorno dopo."
  sequence:
    - service: script.tts_speak
      data:
        message2say: >
          {% set raccolte = states.sensor | selectattr("entity_id", ">=", "sensor.ics_1") | selectattr("entity_id", "<=", "sensor.ics_5") 
            | selectattr("attributes.remaining", "==", 1) | list %}
          {% if raccolte | count > 0 %}
            {% set msg = raccolte | map(attribute='attributes.friendly_name') | join('|') | lower() | trim() | replace('|', ' e ') %}
            {% set msg = msg.replace("carta", "della carta") %}
            {% set msg = msg.replace("umido", "dell'umido") %}
            {% set msg = msg.replace("secco", "del secco") %}
            {% set msg = msg.replace("plastica", "della plastica") %}
            {% set msg = msg.replace("vegetale", "del vegetale") %}
            Attenzione. Domani c'è la raccolta {{ msg }}.
          {% else %}
            Per domani non è prevista nessuna raccolta.
          {% endif %}
        volume: "0.6"
    - service: notify.telegram_paolo
      data:
        message: "{{'\U0000267B'}} {{ states('input_text.tts_last_sentence') }}"

home_contarina_pick_when:
  alias: Contarina Pick
  description: "Avvisa quando c'è una specifica raccolta della spazzatura."
  fields:
    pick_type:
      description: "Tipo di raccolta da considerare ('Carta', 'Plastica', 'Vetro', 'Umido', 'Secco', 'Vegetale')."
      example: "Carta"
  sequence:
    - service: script.tts_speak
      data:
        message2say: >
          {% if pick_type == "carta" %}
            {% set sensor = "ics_4" %}
            {% set msg_part = "della carta" %}
          {% elif pick_type == "plastica" %}
            {% set sensor = "ics_3" %}
            {% set msg_part = "della plastica" %}
          {% elif pick_type == "vetro" %}
            {% set sensor = "ics_3" %}
            {% set msg_part = "del vetro" %}
          {% elif pick_type == "umido" %}
            {% set sensor = "ics_2" %}
            {% set msg_part = "dell'umido" %}
          {% elif pick_type == "secco" %}
            {% set sensor = "ics_1" %}
            {% set msg_part = "del secco" %}
          {% elif pick_type == "vegetale" %}
            {% set sensor = "ics_5" %}
            {% set msg_part = "del vegetale" %}
          {% else %}
            {% set sensor = "" %}
          {% endif %}
          {% if sensor == "" %}
            {% set msg = "Non ho capito quale raccolta" %}
          {% else %}
            {% set gg = state_attr("sensor." ~ sensor, "remaining") | int %}
            {% if gg == 1 %}
              {% set msg = "Domani c'è la raccolta " ~ msg_part %}
            {% elif gg > 1 %}
              {% set msg = "Tra " ~ gg ~ " giorni c'è la raccolta " ~ msg_part %}
            {% endif %}
          {% endif %}
          {{ msg }}
        volume: "0.6"

home_cover_up:
  alias: Home Cover Up
  description: "Alza le serrande per un determinato periodo (secondi)."
  fields:
    how_many_secs:
      description: "Cover up duration (in seconds)."
      example: "10"
  sequence:
    - service: switch.turn_off
      data:
        entity_id: switch.sonoff_dual_2
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff_dual_1
    - delay:
        seconds: "{% if how_many_secs and how_many_secs | int > 0 %}{{ how_many_secs }}{% else %}{{ states('input_number.event_duration_cover_up') | int }}{% endif %}"
    - service: switch.turn_off
      data:
        entity_id: switch.sonoff_dual_1
    - service: notify.telegram_paolo
      data:
        message: "{{'\U00002B06'}} Alzate le serrande ({% if how_many_secs and how_many_secs | int > 0 %}{{ how_many_secs }}{% else %}{{ states('input_number.event_duration_cover_up') | int }}{% endif %} sec.)"

home_cover_down:
  alias: Home Cover Down
  description: "Abbassa le serrande per un determinato periodo (secondi)."
  fields:
    how_many_secs:
      description: "Cover down duration (in seconds)."
      example: "10"
  sequence:
    - service: switch.turn_off
      data:
        entity_id: switch.sonoff_dual_1
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff_dual_2
    - delay:
        seconds: "{% if how_many_secs and how_many_secs | int > 0 %}{{ how_many_secs }}{% else %}{{ states('input_number.event_duration_cover_down') | int }}{% endif %}"
    - service: switch.turn_off
      data:
        entity_id: switch.sonoff_dual_2
    - service: notify.telegram_paolo
      data:
        message: "{{'\U00002B07'}} Abbassate le serrande ({% if how_many_secs and how_many_secs | int > 0 %}{{ how_many_secs }}{% else %}{{ states('input_number.event_duration_cover_down') | int }}{% endif %} sec.)"

home_cover_stop:
  alias: Home Cover Stop
  description: "Ferma le serrande."
  sequence:
    - service: switch.turn_off
      data:
        entity_id: switch.sonoff_dual_1
    - service: switch.turn_off
      data:
        entity_id: switch.sonoff_dual_2

say_next_cover_down:
  alias: Tell Next Cover Down Time
  description: "Tell time of the next cover down."
  sequence:
    - service: script.tts_speak
      data:
        message2say: >
          Serrande giù: {% if '{:02}'.format(now().hour) ~ '{:02}'.format(now().minute) > states('sensor.cover_down_start').replace(":", "") %}domani,{% endif %} alle {{ states('sensor.cover_down_start').replace(":", " e ") }}
        volume: "0.3"

say_energy_consumption:
  #Comunica il consumo di energia elettrica
  alias: Tell Energy Consumption
  description: "Tell the energy consumption via TTS."
  sequence:
    - service: script.tts_speak
      data:
        message2say: >
          {% if is_state('binary_sensor.online_pzem_004t', 'on') %}
          Il consumo attuale è di {{ states('sensor.pzem_power') }} watt
          {% else %}
          Il consumo attuale non è disponibile
          {% endif %}
        volume: "0.6"

bed_cover_on:
  #Accende la coperta elettrica
  alias: Bed Cover On
  description: "Switch on the electric blanket."
  sequence:
    - service: >-
        {% if is_state('binary_sensor.online_sonoff_basic_1', 'on') %}
          switch.turn_on
        {% else %}
          switch.turn_off
        {% endif %}
      data:
        entity_id: switch.sonoff_basic_1
    - service: script.tts_speak
      data:
        message2say: >-
          {% if is_state('binary_sensor.online_sonoff_basic_1', 'on') %}
          Coperta accesa
          {% else %}
          La presa non è collegata
          {% endif %}
        volume: "0.4"

bed_cover_off:
  #Spegne la coperta elettrica
  alias: Bed Cover Off
  description: "Switch off the electric blanket."
  sequence:
    - service: switch.turn_off
      data:
        entity_id: switch.sonoff_basic_1
    - service: script.tts_speak
      data:
        message2say: >-
          {% if is_state('binary_sensor.online_sonoff_basic_1', 'on') %}
          Coperta spenta
          {% else %}
          La presa non è collegata
          {% endif %}
        volume: "0.4"

garage_door_open_lock:
  alias: Garage Door Open & Lock
  description: "Open & lock the garage door."
  sequence:
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff_rele_1
    - delay: "00:00:16"
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff_rele_1

garage_door_close:
  alias: Garage Door Close
  description: "Close the garage door."
  sequence:
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff_rele_1


#++++++++++++++++++++++++++++++++++
#+++++ Garden related scripts +++++
#++++++++++++++++++++++++++++++++++
mower_start:
  alias: Mower Start
  icon: mdi:flag-checkered
  description: "Send 'Start' command to mower."
  sequence:
    - service: landroid_cloud.start
      data:
        id: !secret landroid_id
    - service: notify.telegram_paolo
      data:
        message: "{{'\U0001F69C'}} {{'\U0001F3C1'}} Sent 'Start' command to mower"

mower_pause:
  alias: Mower Pause
  icon: mdi:pause
  description: "Send 'Pause' command to mower."
  sequence:
    - service: landroid_cloud.pause
      data:
        id: !secret landroid_id
    - service: notify.telegram_paolo
      data:
        message: "{{'\U0001F69C'}} {{'\U000023F8'}} Sent 'Pause' command to mower"

mower_home:
  alias: Mower Home
  icon: mdi:home-variant
  description: "Send 'Go Home' command to mower."
  sequence:
    - service: landroid_cloud.home
      data:
        id: !secret landroid_id
    - service: notify.telegram_paolo
      data:
        message: "{{'\U0001F69C'}} {{'\U0001F519'}} Sent 'Go Home' command to mower"

gate_big_open_lock:
  alias: Big Gate Open & Lock
  description: "Open & lock the big gate."
  sequence:
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff_1000d4864e
    - service: script.tts_speak
      data:
        message2say: Stò aprendo il cancello
        volume: "0.5"
    - delay: "00:00:27"
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff_1000d4864e

gate_big_close:
  alias: Big Gate Close
  description: "Close the big gate."
  sequence:
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff_1000d4864e
